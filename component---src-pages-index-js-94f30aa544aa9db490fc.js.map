{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["CENTER","IndexPage","countryPoint","a","feature","latlng","updatedFromatted","casesString","properties","additionalClass","country","updated","cases","deaths","recovered","slice","Date","toDateString","recoveryRate","resolved","html","toFixed","Leaflet","marker","icon","divIcon","className","riseOnHover","map","leafletElement","axios","get","response","console","log","data","Array","isArray","length","geoJson","type","features","countryInfo","lat","lng","long","geometry","coordinates","GeoJSON","pointToLayer","addTo","mapSettings","center","defaultBaseMap","zoom","mapEffect","pageName"],"mappings":"6kBAQA,IAIMA,EAAS,CAHR,GACA,IAyHQC,UApHG,WAAM,kCAQtB,0BA+BWC,EA/BX,SAAAC,EAAA,yDA+BWD,EA/BX,SA+BwBE,EAAYC,QAAO,IAAnBD,MAAQ,IAAW,IAEnCE,EACAC,EAHmC,EACfH,EAAjBI,kBADgC,MACrB,GADqB,EAInCC,EAAgB,OAElBC,EAKEF,EALFE,QACAC,EAIEH,EAJFG,QACAC,EAGEJ,EAHFI,MACAC,EAEEL,EAFFK,OACAC,EACEN,EADFM,UAGFP,EAAY,GAAGK,EACZA,EAAM,MACPL,EAAiBA,EAAYQ,MAAM,GAAG,GAA3B,MAEVH,GAAO,MAAMH,EAAgB,QAC7BG,EAAM,KAAMA,GAAO,MAAOH,EAAgB,YAC1CG,EAAM,KAAOA,GAAO,MAAQH,EAAgB,QAC5CG,EAAM,MAAQH,EAAgB,YAC9BE,IACDL,EAAiB,IAAIU,KAAKL,GAASM,gBAErC,IACIC,EAAgBJ,EAAUF,EAAO,IACjCO,GAAaN,EAAOC,GAAWF,EAAO,IACpCQ,EAAI,wBACKX,EADL,8EAGAC,EAHA,yEAKiCE,EALjC,8DAM+BN,EAN/B,4DAO6BO,EAP7B,gEAQiCC,EARjC,qFAHOD,EAAOD,EAAO,KAauBS,QAAQ,GAVpD,qEAWqCH,EAAaG,QAAQ,GAX1D,qEAYqCF,EAASE,QAAQ,GAZtD,4DAeNd,EAfM,4BAkBV,OAAOe,IAAQC,OAAOlB,EAAO,CAC3BmB,KAAKF,IAAQG,QAAQ,CACnBC,UAAU,OACVN,SAEFO,aAAY,KAjFwBC,QAA1C,MAAkD,GAAlD,GAA2BC,eAA3B,0EAIqBC,IAAMC,IAAI,0CAJ/B,OAIIC,EAJJ,gEAMIC,QAAQC,IAAI,IAAZ,MANJ,8BASSC,EAAQH,EAARG,KACSC,MAAMC,QAAQF,IAAOA,EAAKG,OAAO,EAVnD,mDAaQC,EAAQ,CACZC,KAAK,oBACLC,SAASN,EAAKP,KAAI,SAAClB,QAAa,IAAbA,MAAQ,IAAK,MACRA,EAAhBgC,mBADwB,MACZ,GADY,EAExBC,EAAeD,EAAfC,IAAUC,EAAKF,EAAVG,KACX,MAAM,CACJL,KAAK,UACLhC,WAAW,OAAD,UACLE,GAELoC,SAAS,CACPN,KAAK,QACLO,YAAY,CAACH,EAAID,SA4DH,IAAIrB,IAAQ0B,QAAQT,EAAS,CACjDU,aAAa/C,IAEDgD,MAAMtB,GAxFtB,2DARsB,sBAmGtB,IAAMuB,EAAc,CAClBC,OAAQpD,EACRqD,eAAgB,SAChBC,KAxGiB,EAyGjBC,UAvGoB,6CA0GtB,OACE,kBAAC,IAAD,CAAQC,SAAS,QACf,kBAAC,IAAD,KACE,oDAEF,kBAAC,IAAQL","file":"component---src-pages-index-js-94f30aa544aa9db490fc.js","sourcesContent":["import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport Leaflet from 'leaflet';\r\nimport axios from 'axios';\r\nimport Layout from 'components/Layout';\r\nimport Map from 'components/Map';\r\n\r\n\r\nconst LOCATION = {\r\n  lat: 20,\r\n  lng: 30\r\n};\r\nconst CENTER = [LOCATION.lat, LOCATION.lng];\r\nconst DEFAULT_ZOOM = 3;\r\n\r\nconst IndexPage = () => {\r\n\r\n  /**\r\n   * mapEffect\r\n   * @description Fires a callback once the page renders\r\n   * @example Here this is and example of being used to zoom in and set a popup on load\r\n   */\r\n\r\n  async function mapEffect({ leafletElement:map } = {}) {\r\n    if(!map) return;\r\n    let response;\r\n    try{\r\n      response = await axios.get('https://corona.lmao.ninja/v2/countries');\r\n    }catch (e){\r\n      console.log('E',e);\r\n      return;\r\n    }\r\n    const {data} = response;\r\n    const hasData = Array.isArray(data)&&data.length>0;\r\n    if(!hasData) return;\r\n\r\n    const geoJson={\r\n      type:'FeatureCollection',\r\n      features:data.map((country={})=>{\r\n        const{countryInfo={}}=country;\r\n        const{lat, long:lng}=countryInfo;\r\n        return{\r\n          type:'Feature',\r\n          properties:{\r\n            ...country,\r\n          },\r\n          geometry:{\r\n            type:'Point',\r\n            coordinates:[lng,lat]\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    function countryPoint(feature={}, latlng){\r\n      const {properties={}} = feature;\r\n      let updatedFromatted;\r\n      let casesString;\r\n      let additionalClass=\"none\";\r\n      const{\r\n        country,\r\n        updated,\r\n        cases,\r\n        deaths,\r\n        recovered\r\n      } = properties\r\n\r\n      casesString=`${cases}`;\r\n      if(cases>1000){\r\n        casesString = `${casesString.slice(0,-3)}k+`\r\n      }\r\n      if(cases<=1000) additionalClass=\"good\";\r\n      if(cases>1000&&cases<=10000) additionalClass=\"moderate\";\r\n      if(cases>10000&&cases<=100000) additionalClass=\"high\";\r\n      if(cases>100000) additionalClass=\"critical\";\r\n      if(updated){\r\n        updatedFromatted=new Date(updated).toDateString();\r\n      }\r\n      let deathRate = (deaths/cases)*100;\r\n      let recoveryRate = (recovered/cases)*100;\r\n      let resolved = ((deaths+recovered)/cases)*100;\r\n      const html = `\r\n      <span class=\"${additionalClass} icon-marker \">\r\n        <span class=\"icon-marker-tooltip\">\r\n          <h2>${country}</h2>\r\n          <ul>\r\n            <li><span>Confirmed:</span>  <span>${cases}</span></li>\r\n            <li><span>Updated:</span>  <span>${updatedFromatted}</span></li>\r\n            <li><span>Deaths:</span> <span>${deaths}</span></li>\r\n            <li><span>Recovered:</span>  <span>${recovered}</span></li>\r\n            <hr/>\r\n            <li><span>Death rate:</span>  <span>${deathRate.toFixed(2)}%</span></li>\r\n            <li><span>Recovery rate:</span>  <span>${recoveryRate.toFixed(2)}%</span></li>\r\n            <li><span>Resolved rate:</span>  <span>${resolved.toFixed(2)}%</span></li>\r\n          </ul>\r\n        </span>\r\n        ${casesString}\r\n        </span>\r\n      `;\r\n      return Leaflet.marker(latlng,{\r\n        icon:Leaflet.divIcon({\r\n          className:'icon',\r\n          html\r\n        }),\r\n        riseOnHover:true\r\n      });\r\n  } \r\n    //for custom markers as a second parameter provide options\r\n    const geoJsonLayers = new Leaflet.GeoJSON(geoJson, {\r\n      pointToLayer:countryPoint\r\n    });\r\n    geoJsonLayers.addTo(map);\r\n}\r\n\r\n  const mapSettings = {\r\n    center: CENTER,\r\n    defaultBaseMap: 'Mapbox',\r\n    zoom: DEFAULT_ZOOM,\r\n    mapEffect\r\n  };\r\n\r\n  return (\r\n    <Layout pageName=\"home\">\r\n      <Helmet>\r\n        <title>Covid19 Stat Map</title>\r\n      </Helmet>\r\n      <Map {...mapSettings}/>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n"],"sourceRoot":""}