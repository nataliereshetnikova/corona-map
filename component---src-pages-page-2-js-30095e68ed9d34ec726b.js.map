{"version":3,"sources":["webpack:///./src/pages/page-2.js"],"names":["CENTER","SecondPage","countryPoint","a","feature","latlng","updatedFromatted","scoreString","properties","additionalClass","country","updated","cases","score","Date","toDateString","html","Leaflet","marker","icon","divIcon","className","riseOnHover","map","leafletElement","axios","get","responseGeo","responseTravel","console","log","data","travelData","hasData","Array","isArray","length","hasTravelData","Object","keys","iso2","countryInfo","hasOwnProperty","advisory","geoJson","type","features","lat","lng","long","geometry","coordinates","GeoJSON","pointToLayer","addTo","mapSettings","center","defaultBaseMap","zoom","mapEffect","pageName"],"mappings":"2mBAOA,IAIMA,EAAS,CAHR,GACA,IAwHQC,UAnHI,WAAM,kCAQvB,kCA2CWC,EA3CX,SAAAC,EAAA,yDA2CWD,EA3CX,SA2CwBE,EAAYC,QAAO,IAAnBD,MAAQ,IAAW,IAEnCE,EACAC,EAHmC,EACfH,EAAjBI,kBADgC,MACrB,GADqB,EAInCC,EAAgB,OAElBC,EAIEF,EAJFE,QACAC,EAGEH,EAHFG,QACAC,EAEEJ,EAFFI,MACAC,EACEL,EADFK,MAGCA,EAAM,MAAIJ,EAAgB,QAC1BI,GAAO,KAAKA,GAAO,MAAIJ,EAAkB,UACzCI,EAAM,MAAIJ,EAAgB,UACZ,eAJjBF,EAAY,GAAGM,KAIcN,EAAY,KACtCI,IACDL,EAAiB,IAAIQ,KAAKH,GAASI,gBAErC,IAAMC,EAAI,wBACKP,EADL,8EAGAC,EAHA,4EAKoCG,EALpC,mFAOiCD,EAPjC,8DAQ+BN,EAR/B,2DAWNC,EAXM,4BAcV,OAAOU,IAAQC,OAAOb,EAAO,CAC3Bc,KAAKF,IAAQG,QAAQ,CACnBC,UAAU,OACVL,SAEFM,aAAY,KAjFwBC,QAA1C,MAAkD,GAAlD,GAA2BC,eAA3B,0EAKwBC,IAAMC,IAAI,0CALlC,cAKIC,EALJ,iBAM2BF,IAAMC,IAAI,6GANrC,QAMIE,EANJ,gEAQIC,QAAQC,IAAI,IAAZ,MARJ,8BAWSC,EAAQJ,EAARI,KACDC,EAAaJ,EAAeG,KAAKA,KACjCE,EAAUC,MAAMC,QAAQJ,IAAOA,EAAKK,OAAO,EAC3CC,EAAgBC,OAAOC,KAAKP,GAAYI,OAAO,EACjDH,GAAUI,EAfhB,mDAgBEN,EAAKR,KAAI,SAACb,QAAa,IAAbA,MAAQ,IAChB,IAAI8B,EAAO9B,EAAQ+B,YAAYD,KAC/B,GAAGR,EAAWU,eAAeF,GAAM,CACjC,IAAI3B,EAAQmB,EAAWQ,GAAMG,SAAS9B,MACtCH,EAAO,MAAYG,EAErB,OAAOH,KAETmB,QAAQC,IAAIC,GACNa,EAAQ,CACZC,KAAK,oBACLC,SAASf,EAAKR,KAAI,SAACb,QAAa,IAAbA,MAAQ,IAAK,MACRA,EAAhB+B,mBADwB,MACZ,GADY,EAExBM,EAAeN,EAAfM,IAAUC,EAAKP,EAAVQ,KACX,MAAM,CACJJ,KAAK,UACLrC,WAAW,OAAD,UACLE,GAELwC,SAAS,CACPL,KAAK,QACLM,YAAY,CAACH,EAAID,SAgDH,IAAI9B,IAAQmC,QAAQR,EAAS,CACjDS,aAAanD,IAEDoD,MAAM/B,GAxFtB,2DARuB,sBAmGvB,IAAMgC,EAAc,CAClBC,OAAQxD,EACRyD,eAAgB,UAChBC,KAxGiB,IAyGjBC,UAvGqB,6CA0GvB,OACE,kBAAC,IAAD,CAAQC,SAAS,QACf,kBAAC,IAAD,KACE,mDAEF,kBAAC,IAAQL","file":"component---src-pages-page-2-js-30095e68ed9d34ec726b.js","sourcesContent":["import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport Leaflet from 'leaflet';\r\nimport axios from 'axios';\r\nimport Layout from 'components/Layout';\r\nimport Map from 'components/Map';\r\n\r\nconst LOCATION = {\r\n  lat: 20,\r\n  lng: 30\r\n};\r\nconst CENTER = [LOCATION.lat, LOCATION.lng];\r\nconst DEFAULT_ZOOM = 2.5;\r\n\r\nconst SecondPage = () => {\r\n\r\n  /**\r\n   * mapEffect\r\n   * @description Fires a callback once the page renders\r\n   * @example Here this is and example of being used to zoom in and set a popup on load\r\n   */\r\n\r\n  async function mapEffect({ leafletElement:map } = {}) {\r\n    if(!map) return;\r\n    let responseGeo;\r\n    let responseTravel;\r\n    try{\r\n      responseGeo = await axios.get('https://corona.lmao.ninja/v2/countries');\r\n      responseTravel = await axios.get('https://www.travel-advisory.info/api?fbclid=IwAR3SnvJQ1-dND181hi-pNwL5BH-c41Vg0j8G_FMpqHbPkhWnsbfsJQTfbYQ');\r\n    }catch (e){\r\n      console.log('E',e);\r\n      return;\r\n    }\r\n    const {data} = responseGeo;\r\n    const travelData = responseTravel.data.data;\r\n    const hasData = Array.isArray(data)&&data.length>0;\r\n    const hasTravelData = Object.keys(travelData).length>0;\r\n    if(!hasData||!hasTravelData) return;\r\n    data.map((country={})=>{\r\n      let iso2 = country.countryInfo.iso2;\r\n      if(travelData.hasOwnProperty(iso2)){\r\n        let score = travelData[iso2].advisory.score;\r\n        country[\"score\"] = score;\r\n      }\r\n      return country;\r\n    });\r\n    console.log(data);\r\n    const geoJson={\r\n      type:'FeatureCollection',\r\n      features:data.map((country={})=>{\r\n        const{countryInfo={}}=country;\r\n        const{lat, long:lng}=countryInfo;\r\n        return{\r\n          type:'Feature',\r\n          properties:{\r\n            ...country,\r\n          },\r\n          geometry:{\r\n            type:'Point',\r\n            coordinates:[lng,lat]\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    function countryPoint(feature={}, latlng){\r\n      const {properties={}} = feature;\r\n      let updatedFromatted;\r\n      let scoreString;\r\n      let additionalClass=\"none\";\r\n      const{\r\n        country,\r\n        updated,\r\n        cases,\r\n        score\r\n      } = properties\r\n      scoreString=`${score}`;\r\n      if(score<3.5)additionalClass=\"safe\";\r\n      if(score>=3.5&&score<=4.5)additionalClass = \"medium\";\r\n      if(score>4.5)additionalClass=\"unsafe\";\r\n      if(scoreString===\"undefined\")scoreString=\"?\";\r\n      if(updated){\r\n        updatedFromatted=new Date(updated).toDateString();\r\n      }\r\n      const html = `\r\n      <span class=\"${additionalClass} icon-marker \">\r\n        <span class=\"icon-marker-tooltip\">\r\n          <h2>${country}</h2>\r\n          <ul>\r\n            <li><span>Travel score:</span>  <span>${score}</span></li>\r\n            <hr/>\r\n            <li><span>Confirmed:</span>  <span>${cases}</span></li>\r\n            <li><span>Updated:</span>  <span>${updatedFromatted}</span></li>\r\n          </ul>\r\n        </span>\r\n        ${scoreString}\r\n        </span>\r\n      `;\r\n      return Leaflet.marker(latlng,{\r\n        icon:Leaflet.divIcon({\r\n          className:'icon',\r\n          html\r\n        }),\r\n        riseOnHover:true\r\n      });\r\n  } \r\n    //for custom markers as a second parameter provide options\r\n    const geoJsonLayers = new Leaflet.GeoJSON(geoJson, {\r\n      pointToLayer:countryPoint\r\n    });\r\n    geoJsonLayers.addTo(map);\r\n}\r\n\r\n  const mapSettings = {\r\n    center: CENTER,\r\n    defaultBaseMap: 'Mapbox2',\r\n    zoom: DEFAULT_ZOOM,\r\n    mapEffect\r\n  };\r\n\r\n  return (\r\n    <Layout pageName=\"home\">\r\n      <Helmet>\r\n        <title>Travel advisory</title>\r\n      </Helmet>\r\n      <Map {...mapSettings}/>\r\n    </Layout>\r\n  );\r\n};\r\nexport default SecondPage;\r\n"],"sourceRoot":""}